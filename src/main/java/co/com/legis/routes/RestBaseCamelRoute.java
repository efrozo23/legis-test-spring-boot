
package co.com.legis.routes;

import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.camel.model.rest.RestHostNameResolver;
import org.apache.camel.model.rest.RestParamType;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RestController;

import co.com.legis.basehal_models.Async_Base_Hal_Model;
import co.com.legis.basehal_models.Base_Problem_Hal_Model;
import co.com.legis.common.ExceptionHandling;
import co.com.legis.request_models.collect.DrupalCollectDataModel;
import co.com.legis.request_models.collect.ExternalOrder;
import co.com.legis.request_models.collect.RequestActivation;
import co.com.legis.request_models.collect.RequestCollect;
import co.com.legis.request_models.elnvoicing.RequestSapDTO;
import co.com.legis.request_models.events.EventModel;
import co.com.legis.request_models.events.NumberErpReceptionEdiModel;
import co.com.legis.request_models.remissions.ResponseSapRemissionModel;
import co.com.legis.request_models.saleschannel.BidOrderRequestModel;
import co.com.legis.request_models.saleschannel.CustomerRequestModel;
import co.com.legis.request_models.saleschannel.InsideNumberModel;
import co.com.legis.request_models.saleschannel.InventoryRequestModel;
import co.com.legis.request_models.saleschannel.NotInfoFacturaModel;
import co.com.legis.request_models.saleschannel.NotiStatusOportunidad;
import co.com.legis.request_models.saleschannel.NotificationOrderModel;
import co.com.legis.request_models.saleschannel.OrderConfirmationRequestModel;
import co.com.legis.request_models.saleschannel.OrderDispatchRequestModel;
import co.com.legis.request_models.saleschannel.OrderInvoiceRequestModel;
import co.com.legis.request_models.saleschannel.OrderListDispatchesModel;
import co.com.legis.request_models.saleschannel.OrderListMixModel;
import co.com.legis.request_models.saleschannel.PriceRequestModel;
import co.com.legis.request_models.saleschannel.salesforce.legis.CollectReportModel;
import co.com.legis.request_models.saleschannel.salesforce.legis.GenerateReport;
import co.com.legis.request_models.saleschannel.salesforce.legis.WalletCollect;
import co.com.legis.request_models.saleschannel.sap.RequestSap;
import co.com.legis.request_models.salesforce.AccountErpRequestModel;
import co.com.legis.request_models.salesforce.AccountsRequestModel;
import co.com.legis.request_models.transport.document.sap.DocumentTransport;
import co.com.legis.request_models.transport.shipment.Shipment;
import co.com.legis.request_models.transport.tracking.Tracking;

@Component
public class RestBaseCamelRoute extends RouteBuilder {

    @Override
    public void configure() throws Exception {
        ExceptionHandling exHandling = new ExceptionHandling();
        exHandling.AttachException(this);

        // @formatter:off
//        restConfiguration().apiContextRouteId("restConfiguration")
//            .component("servlet")
//            .port("{{sap.host.port}}")
//            .contextPath("/api")
//            .apiContextPath("api-docs/utils/search")
//            .apiContextListing(true)
//            .bindingMode(RestBindingMode.auto)
//            .enableCORS(true)
//            .hostNameResolver(RestHostNameResolver.localHostName)
//            .dataFormatProperty("prettyPrint", "true")
//            .apiProperty("cors", "true")
//            .apiProperty("base.path", "rest")
//            .apiProperty("api.version", "1.0.0")
//            .apiProperty("api.title", "Legis SAP Integration")
//            .apiProperty("api.description", "REST Api for SAP System")
//            .apiProperty("api.contact.url", "https://www.legis.com.co")
//            .apiProperty("api.contact.name", "legis")
//            .apiProperty("api.contact.email", "info@legis.com")
//            .componentProperty("requestHeaderSize", "32768")
//            .componentProperty("responseHeaderSize", "32768")
//            ;
    	// Define the component and hostname and port
    	restConfiguration().component("servlet")
    	    .host("localhost").port(8080);
        
        rest().id("restBase")
        	.tag("data/sales-channels")
            .get("/data/sales-channels/{channel-name}/catalog/sku-id-by-code/{sku-code}").id("LEG-SC-SKU-ID-R")
            	.description("Find Sku code(filter By Code SAP)")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("sku-code")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
    			.responseMessage().code("200").message("The resource has been fetched and is transmitted in the message body")
				.endResponseMessage()
            .to("direct-vm:SyncResponse");

        rest().id("PutPriceToProduct")
        	.tag("data/sales-channels")
            .put("/data/sales-channels/{channel-name}/skus/{sku-code}/prices").id("LEG-SC-PRI-U")
            	.description("Update the price of a product (Update by SkuId)")
                .type(PriceRequestModel.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("sku-code")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
            .to("direct-vm:AsyncResponse");
            
        rest().id("PutInventoryToProduct")
    		.tag("data/sales-channels")
            .put("/data/sales-channels/{channel-name}/inventory/warehouses/{warehouse-id}/skus-by-id/{sku-id}").id("LEG-SC-INV-U")
            	.description("Update inventory of a product (Update by WarehouseId and SkuId)")
                .type(InventoryRequestModel.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("warehouse-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("sku-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
            .to("direct-vm:AsyncResponse");
                
        rest().id("PutOrderTodispatch")
    		.tag("data/sales-channels")
            .put("/data/sales-channels/{channel-name}/orders/{order-id}/dispatches/{dispatch-number}").id("Order-Dispatch")
            	.description("Indicates that the order was dispatched with the guide number (Update by OrderId and DispatchNumber)")
                .type(OrderDispatchRequestModel.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("order-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("dispatch-number")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
            .to("direct-vm:AsyncResponse");
                
        rest().id("PutInvoiceOfOrders")
    		.tag("data/sales-channels")
            .put("/data/sales-channels/{channel-name}/orders/{order-id}/invoices/{invoice-number}").id("LEG-SC-ORD-IN-U")
            	.description("Update Order Invoice in Sales Channel")
            	.description("Update Order Invoice in Sales Channel")
                .type(OrderInvoiceRequestModel.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                .required(true)
                .type(RestParamType.path)
                .endParam()
                .param().name("order-id")
                .required(true)
                .type(RestParamType.path)
                .endParam()
                .param().name("invoice-number")
                .required(true)
                .type(RestParamType.path)
                .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
                .to("direct-vm:AsyncResponse");
                
        rest().id("PostSendOrder")
    		.tag("data/sales-channels")
            .post("/data/sales-channels/{channel-name}/api/erp/orders/{order-id}").id("Sales-Channels-Sap-Orders")
            	.description("Sending purchase orders to SAP")
                .type(RequestSap.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("order-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
            .to("direct-vm:AsyncResponse");
            
        rest().id("PutOrdersERP")
    		.tag("data/sales-channels")
            .put("/data/sales-channels/{channel-name}/orders/{order-id}/erp-orders/{erp-order-id}").id("LEG-SC-ORD-C")
	            .type(OrderConfirmationRequestModel.class)
	            .consumes("application/json")
	            .produces("application/json")
	            .param().name("channel-name")
	                .required(true)
	                .type(RestParamType.path)
	            .endParam()
	            .param().name("order-id")
	                .required(true)
	                .type(RestParamType.path)
	            .endParam()
	            .param().name("erp-order-id")
	            .required(true)
	            .type(RestParamType.path)
	            .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
	        .to("direct-vm:AsyncResponse")
            
        ;
        

        rest().id("PutOrdersERP")
    		.tag("data/sales-channels")
            .put("/data/sales-channels/{channel-name}/orders/{order-id}/bid-order/{erp-order-id}").id("LEG-SC-ORD-BID")
	            .type(BidOrderRequestModel.class)
	            .consumes("application/json")
	            .produces("application/json")
	            .param().name("channel-name")
	                .required(true)
	                .type(RestParamType.path)
	            .endParam()
	            .param().name("order-id")
	                .required(true)
	                .type(RestParamType.path)
	            .endParam()
	            .param().name("erp-order-id")
	            .required(true)
	            .type(RestParamType.path)
	            .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
	        .to("direct-vm:AsyncResponse")
            
        ;
        
        
        rest().id("PutCustomerSalesChannel")
    	.tag("data/sales-channels")
        .put("/data/sales-channels/{channel-name}/customer/{erp-customer-id}").id("LEG-SC-CUSTOMER-U")
        	.description("Update the customer in sales-channel (Update by customer)")
            .type(CustomerRequestModel.class)
            .consumes("application/json")
            .produces("application/json")
            .param().name("channel-name")
                .required(true)
                .type(RestParamType.path)
            .endParam()
            .param().name("erp-customer-id")
                .required(true)
                .type(RestParamType.path)
            .endParam()
            .param().name("source_system")
	            .description("System originMSG")
	            .dataType("string")
	            .required(true)
	            .type(RestParamType.header)
            .endParam()
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()	
        .to("direct-vm:AsyncResponse");
        
        rest().id("GetOrderDispatchSalesChannel")
	    	.tag("data/sales-channels")
	        .post("/data/sales-channels/{channel-name}/orders-dispatches").id("SIL-SC-ORDERS-DISPATCHES.R")
	    	.description("Send the order dispatch in sales-channel (get send)")
	    	.type(OrderListDispatchesModel.class)
	        .param().name("channel-name")
	            .required(true)
	            .type(RestParamType.path)
	        .endParam()
	        .param().name("order-list")
	            .required(true)
	            .type(RestParamType.header)
	        .endParam()
			.responseMessage().code("200").message("The resource has been fetched and is transmitted in the message body")
			.endResponseMessage()
       .to("direct-vm:AsyncResponse");
        
   
        
//        
        rest().id("events")
        	.tag("events/apps")
            .post("/events/apps").id("events")
                .type(EventModel.class)
                .consumes("application/json;charset=UTF-8")
                .produces("application/json;charset=UTF-8")
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
            .to("direct-vm:AsyncResponseEvents")
        ;
        
        rest().id("PutNotificationOrderNumber")
	    	.tag("data/sales-channels")
	        .put("/data/sales-channels/{channel-name}/notification_order_number/{id_opportunity}").id("SAP-REQUEST.NOTIFICATION_ORDER_NUMBER")
	    	.description("Send the information opportunity")
	    	.type(NotificationOrderModel.class)
	        .param().name("channel-name")
	            .required(true)
	            .type(RestParamType.path)
	        .endParam()
	        .param().name("id_opportunity")
	            .required(true)
	            .type(RestParamType.path)
	        .endParam()
			.responseMessage().code("200").message("The resource has been fetched and is transmitted in the message body")
			.endResponseMessage()
			.to("direct-vm:AsyncResponse");
        
        rest().id("PutNotificationInformacionFactura")
	    	.tag("data/sales-channels")
	        .put("/data/sales-channels/{channel-name}/invoice_information/{id_opportunity}").id("SAP-REQUEST.INFORMACION_FACTURA")
	    	.description("Send the notify invoice information ")
	    	.type(NotInfoFacturaModel.class)
	        .param().name("channel-name")
	            .required(true)
	            .type(RestParamType.path)
	        .endParam()
	        .param().name("id_opportunity")
	            .required(true)
	            .type(RestParamType.path)
	        .endParam()
			.responseMessage().code("200").message("The resource has been fetched and is transmitted in the message body")
			.endResponseMessage()
			.to("direct-vm:AsyncResponse");
        
        rest().id("PutNotificationEstadoOportunidad")
  	    	.tag("data/sales-channels")
  	        .put("/data/sales-channels/{channel-name}/notification_status_opportunity/{id_opportunity}").id("SAP-REQUEST.NOT_ESTADO_OPORTUNIDAD")
  	    	.description("Send the notify status opportunity")
  	    	.type(NotiStatusOportunidad.class)
  	        .param().name("channel-name")
  	            .required(true)
  	            .type(RestParamType.path)
  	        .endParam()
  	        .param().name("id_opportunity")
  	            .required(true)
  	            .type(RestParamType.path)
  	        .endParam()
  			.responseMessage().code("200").message("The resource has been fetched and is transmitted in the message body")
  			.endResponseMessage()
  			.to("direct-vm:AsyncResponse");
/******************************** Rutas de factura electronica *********************************************/
        rest().id("restIEinvoicing")
	        .tag("data/einvoicing")
            .post("/data/einvoicing/invoices").id("Einvoicing")
            	.description("generation of electronic invoice (Sap-Transferring)")
                .type(RequestSapDTO.class)
                .consumes("application/json;charset=UTF-8")
                .produces("application/hal+json")
                .param().name("source_system")
	                .description("System originMSG")
	                .dataType("string")
	                .required(true)
	                .type(RestParamType.header)
                .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
            .to("direct-vm:AsyncResponseEivoicing")
        ;	        
/******************************** Fin Rutas de factura electronica *****************************************/   
        
	      rest().id("POST-DRUPAL-REQUEST.ORDERS.LEGIS")
	        .tag("data/collect-legis")
	    	.post("/data/drupal/collect").id("DRUPAL-REQUEST.ORDERS.LEGIS")
	    	.description("Send the collection for the legal field")
	    	  .type(DrupalCollectDataModel.class)
              .consumes("application/json;charset=UTF-8")
              .produces("application/hal+json")
              .param().name("source_system")
	                .description("System originMSG")
	                .dataType("string")
	                .required(true)
	                .type(RestParamType.header)
              .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
         .to("velocity://response.json");
	      	      
	      rest().id("PUT-DRUPAL-REQUEST.CANCEL.ORDERS.LEGIS")
	        .tag("data/collect-legis")
	    	.put("data/drupal/epayco_cancel/subscription_epayco_id/{susp-epayco-id}").id("PUT-DRUPAL-REQUEST.CANCEL.ORDERS.LEGIS")
	    	.description("Send the collection for the legal field the cancel suscription")
            .consumes("application/json;charset=UTF-8")
            .produces("application/hal+json")
            .param().name("source_system")
	                .description("System originMSG")
	                .dataType("string")
	                .required(true)
	                .type(RestParamType.header)
            .endParam()
  	        .param().name("susp-epayco-id")
	            .required(true)
	            .type(RestParamType.path)
	        .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
       .to("direct-vm:collect-cancelSuscripcion-response-sync");
	        
/******************************** Rutas de SalesForce CRM y ERP  ******************************************/
/******************************** Contactos ******************************************/
//        rest("/events/crm/updates/contacts/").id("changeContactsCrm")
//        	.tag("events/crm/salesforce")
//            .put("{contact-id-crm}").id("PatchCrmChangeContactById")
//            	.description("Update contacts (Update by ContactID)")
//                .type(ObjectChangeContactDTO.class)
//                .consumes("application/json;charset=UTF-8")
//                .produces("application/hal+json")
//                .param().name("contact-id-crm")
//                    .description("Contacts's referenceID")
//                    .dataType("string")
//                    .required(true)
//                    .type(RestParamType.path)
//                .endParam()
//                .param().name("source_system")
//	                .description("System originMSG")
//	                .dataType("string")
//	                .required(true)
//	                .type(RestParamType.header)
//                 .endParam()
//				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
//				.endResponseMessage()
//			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
//				.endResponseMessage()
//			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
//				.endResponseMessage()	
//            .to("direct-vm:AsyncChangeContactCRM")
//        ;
		        
//        rest("/events/erp/updates/contacts/").id("changeContactsErp")
//        	.tag("events/erp/sap")
//            .patch("{contact-id-erp}").id("PatchErpChangeContactById")
//            	.description("Update contacts (Update by ContactID)")
//                .type(ObjectChangeContactDTO.class)
//                .consumes("application/json;charset=UTF-8")
//                .produces("application/hal+json")
//                .param().name("contact-id-erp")
//                    .description("Contacts's referenceID")
//                    .dataType("string")
//                    .required(true)
//                    .type(RestParamType.path)
//                .endParam()
//                .param().name("source_system")
//	                .description("System originMSG")
//	                .dataType("string")
//	                .required(true)
//		            .type(RestParamType.header)
//	            .endParam()
//				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
//				.endResponseMessage()
//			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
//				.endResponseMessage()
//			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
//			    .endResponseMessage()	
//            .to("direct-vm:AsyncChangeContactERP")
//        ;
//		    
//        rest("/events/crm/updates/contact-relationships/").id("accountsContactsCrm")
//        	.tag("events/crm/salesforce")
//            .put("{contact-relationship-id-crm}").id("PatchCrmAccountContactById")
//            	.description("Update contact relationships (Update by ContactRelationshipsId)")
//                .type(SapAccountContactDTO.class)
//                .consumes("application/json;charset=UTF-8")
//                .produces("application/hal+json")
//                .param().name("contact-relationship-id-crm")
//                    .description("Contact-relationship referenceID")
//                    .dataType("string")
//                    .required(true)
//                    .type(RestParamType.path)
//                .endParam()
//                .param().name("source_system")
//	                .description("System originMSG")
//	                .dataType("string")
//	                .required(true)
//	                .type(RestParamType.header)
//	            .endParam()
//				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
//				.endResponseMessage()
//			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
//				.endResponseMessage()
//			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
//			    .endResponseMessage()	
//            .to("direct-vm:AsyncAccountContactCRM")
//        ;
        
        /**
         * Endpoint events crm report
         */
        
        rest("/events/erp/reports").id("generateReport")
    	.tag("events/erp/reports")
        .post("").id("POST_REPORT_SALESFORCE")
        	.description("Service that generate report in SALESFORCE")
            .type(GenerateReport.class)
            .consumes("application/json;charset=UTF-8")
            .produces("application/hal+json")
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()
		    
		    .to("direct-vm:AsyncResponse")
        ;

        rest("/events/crm/report/wallet").id("WalletCollectLegis")
	    	.tag("events/crm/report/wallet")
	        .put("").id("SAP-REQUEST.SALESFORCE.WALLET.LEGIS")
	        	.description("Send the report information to update the portfolio in Salesforce")
	            .type(WalletCollect.class)
	            .consumes("application/json;charset=UTF-8")
	            .produces("application/hal+json")
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()
			    
			    .to("direct-vm:AsyncResponse")
	        ;

//        rest("/events/erp/updates/contact-relationships/").id("accountsContactsErp")
//        	.tag("events/erp/sap")
//            .patch("{contact-relationship-id-erp}").id("PatchErpAccountContactById")
//            	.description("Update contact relationships (Update by ContactRelationshipsId)")
//                .type(SapAccountContactDTO.class)
//                .consumes("application/json;charset=UTF-8")
//                .produces("application/hal+json")
//                .param().name("contact-relationship-id-erp")
//                    .description("Contact-relationship referenceID")
//                    .dataType("string")
//                    .required(true)
//                    .type(RestParamType.path)
//                .endParam()
//                .param().name("source_system")
//	                .description("System originMSG")
//	                .dataType("string")
//	                .required(true)
//	                .type(RestParamType.header)
//                .endParam()
//				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
//				.endResponseMessage()
//			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
//				.endResponseMessage()
//			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
//			    .endResponseMessage()	
//            .to("direct-vm:AsyncAccountContactERP")
//        ;
        
/******************************** Cuentas ******************************************/	        
        rest().id("restSalesforce")
        	.tag("events/erp/sap")
            .patch("/events/erp/updates/customers/{customer-id-erp}").id("PatchUpdateCustomerById")
            .description("Update an Account CRM (Update by Customer-id-erp )")
                .type(AccountsRequestModel.class)
                .consumes("application/json;charset=UTF-8")
                .produces("application/hal+json")
                .param().name("customer-id-erp")    
                    .description("Account's referenceID")
                    .dataType("string")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("source_system")
                    .description("System originMSG")
                    .dataType("string")
                    .required(true)
                    .type(RestParamType.header)
                .endParam()
    			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()
            .to("direct-vm:AsyncResponseSalesForceCRM");
			
        rest().id("restSalesforceCRM")
            .tag("events/crm/salesforce")
            .put("/events/crm/updates/accounts/{account-id-crm}").id("PatchUpdateAccountsByID")
            .description("Update an Account ERP (Update by Customer-id-)")
                .type(AccountErpRequestModel.class)
                .consumes("application/json;charset=UTF-8")
                .produces("application/hal+json")
                .param().name("account-id-crm")
                    .description("Account's referenceID")
                    .dataType("string")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("source_system")
                    .description("System originMSG")
                    .dataType("string")
                    .required(true)
                    .type(RestParamType.header)
                .endParam()
    			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()
            .to("direct-vm:AsyncResponseSalesForceERP");            

	        
/******************************** Journal ******************************************/
        rest().id("GetJournalByMessageID")
            .tag("utils/logs/journal")
            .get("{{rest.path.get.journal.message.id}}").id("GetFromJournalByMessageID")
            .description("Find JournalMessage (Filter by MessageID)")
                .produces("application/json")
                .param().name("messageId")
                .description("Find JournalMessage (Filter by MessageID)")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
    			.responseMessage().code("202").message("Notification accepted")
				.endResponseMessage()
            .to("direct:getJournal");

        rest().id("GetJournalByJournalID")
            .tag("utils/logs/journal")
            .get("{{rest.path.get.journal.journal.id}}").id("GetFromJournalByID")
            .description("Find JournalMessage (Filter by JournalID)")
                .produces("application/json")
                .param().name("journalId")
                	.description("Find JournalMessage (Filter by JournalID)")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
    			.responseMessage().code("202").message("Notification accepted")
				.endResponseMessage()
            .to("direct:getJournal")
        ;  		
/******************************** Fin Rutas de SalesForce CRM y ERP *****************************************/
        
// **************************************** INICIO SERVICIOS DE TRANSPORTISTAS **************************************** //
        rest().id("ServicesRest-Transport").tag("data/transport")
            .put("/data/transport/operators/{courrier-company-name}/deliveries/{delivery-id}").id("Service-DocumentTransport")
            .description("Servicio consumido por SAP")
                .type(DocumentTransport.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("courrier-company-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()                
                .param().name("delivery-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
    			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()
            .to("direct:RegisterSqlTransport")
            
            .put("/data/transport/operators/{courrier-company-name}/deliveries/{delivery-id}/tracks/{tracking_number}").id("Service-Assignguide")
            .description("Servicio consumido por Silenio")
                .type(Shipment.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("courrier-company-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("delivery-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("tracking_number")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
    			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()
            .to("direct:RegisterSqlTransport")
            
            .post("/data/transport/operators/{courrier-company-name}/deliveries/{delivery-id}/tracks/{tracking_number}/events").id("Service-Tracking")
            .description("Servicio consumido por Silenio")
                .type(Tracking.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("courrier-company-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("delivery-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
                .param().name("tracking_number")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
    			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()
            .to("direct:RegisterSqlTransport")
        ;
// **************************************** FIN SERVICIOS DE TRANSPORTISTAS **************************************** //
        
// **************************************** INICIO SERVICIOS DE ICG **************************************** //
        rest().id("ServicesRest-ICG").tag("data/transport")
            .put("/events/sales-channels/{channel-name}/transfer-orders/{order-id}").id("Service-TransferOrder")
            .description("Servicio consumido por ICG")
                .type(DocumentTransport.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()                
                .param().name("order-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
            .to("direct:RegisterSqlTransport")

            .put("/events/sales-channels/{channel-name}/inventory/transfers/{transfer-mov-id}").id("Service-InventoryTransfer")
            .description("Servicio consumido por ICG")
                .type(DocumentTransport.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()                
                .param().name("transfer-mov-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
            .to("direct:RegisterSqlTransport")
            
            .put("/events/sales-channels/{channel-name}/inventory/transfers/{transfer-mov-id}/confirmation").id("Service-ConfirmTransferOrder")
            .description("Servicio consumido por ICG")
                .type(DocumentTransport.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()                
                .param().name("transfer-mov-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
            .to("direct:RegisterSqlTransport")
        ;
        rest().id("ServicesRest-ICG-Sap").tag("data/sales-channels")
            .put("/data/sales-channels/{channel-name}/transfer-orders/{order-id}").id("Service-UpdateTransferOrder")
            .description("Servicio consumido por SAP")
                .type(DocumentTransport.class)
                .consumes("application/json")
                .produces("application/json")
                .param().name("channel-name")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()                
                .param().name("order-id")
                    .required(true)
                    .type(RestParamType.path)
                .endParam()
            .to("direct:RegisterSqlTransport")
        ;
// **************************************** FIN SERVICIOS DE ICG **************************************** //
        
        //**********************************REST PARA SERVICIO SILENIO************************************//
        rest().id("PutCustomerLegSilenio")
    	.tag("data/sales-channels")
        .put("/data/sales-channels/{channel-name}/customer/mixed-orders-list").id("LEG-SILENIO-PDO-LIST")
        	.description("Update array list orders")
            .type(OrderListMixModel.class)
            .consumes("application/json")
            .produces("application/json")
            
            .param().name("source_system")
	            .description("System originMSG")
	            .dataType("string")
	            .required(true)
	            .type(RestParamType.header)
            .endParam()
            .to("direct:RouteTagMixOrders")
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()	
        .to("direct-vm:AsyncResponse");
        
      //**********************************FIN REST************************************//
        
        //**********************************REST PARA SERVICIOS INTEGRACION RECAUDO-LEGIS************************************//
        rest().id("PostRecaudoLegis")
    	.tag("data/collect-legis")
        .post("/data/collect-legis").id("SAP-RECAUDO-LEGIS-INTEGRACION")
        	.description("Collect legis from SAP")
            .type(RequestCollect.class)
            .consumes("application/json")
            .produces("application/json")
            
            .param().name("source_system")
	            .description("System originMSG")
	            .dataType("string")
	            .required(true)
	            .type(RestParamType.header)
            .endParam()
            
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()	
        .to("direct-vm:AsyncResponse");
        //@formatter:on
        
        /******************************** Rutas de factura electronica *********************************************/
        rest().id("restSAPSendNumberEDI")
	        .tag("data/einvoicing")
            .put("/events/erp/response/edi-process").id("SAP-SEND-NUM-RECEPCION-ORD-EDI")
            	.description("generation of send number reception order EDI")
                .type(NumberErpReceptionEdiModel.class)
                .consumes("application/json;charset=UTF-8")
                .produces("application/hal+json")
                .param().name("source_system")
	                .description("System originMSG")
	                .dataType("string")
	                .required(true)
	                .type(RestParamType.header)
                .endParam()
				.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
				.endResponseMessage()
			    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
			    .endResponseMessage()	
            .to("direct-vm:AsyncResponseSapEdi")
        ;	        
/******************************** Fin Rutas de factura electronica *****************************************/   
        //**********************************REST PARA SERVICIOS INTEGRACION PRINTUX************************************//
        rest().id("PostInsideNumber")
    	.tag("data/printux")
        .post("/data/remission/inside_number").id("SAP-REMISIONES.NUM.INSIDE")
        	.description("Envio de numero de la entrega a Printux desde SAP")
            .type(InsideNumberModel.class)
            .consumes("application/json")
            .produces("application/json")
            
            .param().name("source_system")
	            .description("System originMSG")
	            .dataType("string")
	            .required(true)
	            .type(RestParamType.header)
            .endParam()
            
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()	
        .to("direct-vm:AsyncResponse");
        
        rest().id("PutReservationNumber")
    	.tag("data/printux")
        .put("/data/remission/reservation_number").id("SAP-REMISIONES.NUM.RESERVATION")
        	.description("Realiza el reenvio del numero de la reserva a printux")
            .type(ResponseSapRemissionModel.class)
            .consumes("application/json")
            .produces("application/json")
            
            .param().name("source_system")
	            .description("System originMSG")
	            .dataType("string")
	            .required(true)
	            .type(RestParamType.header)
            .endParam()
            
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()	
        .to("direct-vm:AsyncResponse");
        
        //**********************************REST PARA SERVICIOS REPORTE SALENFORCE************************************//      
        rest().id("generateReportCollect")
        .tag("events/crm/report")
        .put("/events/crm/report/collect").id("PUT_REPORT_SALESFORCE_COLLECT")
    	  .description("Service that generate report in SALESFORCE for the COLLECT")
    	    .type(CollectReportModel.class)
            .consumes("application/json")
            .produces("application/json")
            .param().name("source_system")
	            .description("System originMSG")
	            .dataType("string")
	            .required(true)
	            .type(RestParamType.header)
            .endParam()
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()
        .to("direct-vm:AsyncResponse");
        
       /*
        * Servicios para Ambito juridico
        */       
        rest().id("acticationLegisField")
        .tag("data/collect-legis")
        .post("/data/collect-legis/activation-legal-field").id("COLLECT-LEGIS.REQUEST")
    	  .description("Service that sends information SSO ")
    	    .type(RequestActivation.class)
            .consumes("application/json")
            .produces("application/json")
            .param().name("source_system")
	            .description("System originMSG")
	            .dataType("string")
	            .required(true)
	            .type(RestParamType.header)
            .endParam()
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()
        .to("direct-vm:AsyncResponse");
        
        rest().id("ExternalOrders")
        .tag("data/collect-legis")
        .put("/data/collect-legis/external-order").id("COLLECT.LEGIS.SERV.EXTERNOS.REQUEST")
    	    .description("Service that sends information to COLLECT FROM SAP")
    	    .type(ExternalOrder.class)
            .consumes("application/json")
            .produces("application/json")
            .param().name("source_system")
	            .description("System originMSG")
	            .dataType("string")
	            .required(true)
	            .type(RestParamType.header)
            .endParam()
			.responseMessage().code("202").message("Notification accepted").responseModel(Async_Base_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("400").message("Request rejected due to filling errors").responseModel(Base_Problem_Hal_Model.class)
			.endResponseMessage()
		    .responseMessage().code("500").message("Server error").responseModel(Base_Problem_Hal_Model.class)
		    .endResponseMessage()
        .to("direct-vm:AsyncResponse");

    }
}
